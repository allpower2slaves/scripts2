#!/usr/bin/env bash

# small utility to convert directories to btrfs subvolumes
# made with ansible in mind
# it also uses GNU coreutils, i dont know how would it work on other systems

# currently WIP, some stuff will not work (like error output)

shopt -s dotglob

changed="0" # variable for tracking changes. for `-A` thing
ansible_mode="0" # report parseable "changed" when something was changed

s_dir="" # variable for the directory that needs to be converted
tmp_dir="" # variable for temporary dir with random garbage in its name

main(){
while :; do
	case $1 in
		-h | --help)
			print_help
			exit 0;;
		-v | --verbose) 
			set -o xtrace
			shift
			;;
		-A | --ansible) # ansible mode -- echo changed
			ansible_mode="1"
			shift
			;;
########	-U | --unsafe) # skip directory checks
########		shift
########		;;
########	-D | --dryrun)
########		shift
########		;;
		--) # end of all options
			shift
			break
			;;
		-*) # invalid option
			printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
			print_help
			exit 1
			;;
		*) # when there are no more options
			if [ -n "$1" ]; then
				s_dir="$(realpath $1)"
        		else
				print_help
			fi
			break
	esac
done

test_directory || exit 1
}

print_help(){
	printf "hello world\n"
}

print_error(){
	printf "not hello\n"
}

print_ansible(){
	test $ansible_mode -ne 0 && printf "changed\n" || return 0
}

# function to test if a directory is btrfs and not on some weird link or not a btrfs subvol already
test_directory(){

	# test if the filesystem on btrfs
	if ! (stat -f --format=%T "$(dirname "$s_dir")" | grep -iqe 'btrfs' ); then
		printf "not using btrfs, exiting\n" && return 1
	fi

	# test 3: snake eater
	if [ -d "$s_dir" ]; then
		if (btrfs subvolume show "$s_dir" 2>&1 | grep -iqve 'ERROR: Not a Btrfs subvolume: Invalid argument'); then
			printf "$s_dir is already is a btrfs subvolume\n"
		else
			convert_thing
		fi
	elif [ ! -e "$s_dir" ]; then
		create_thing
	else
		printf "ERROR: $s_dir might be a file or you lack necessary permissions\n" && return 1
	fi
	




	# test if the directory is already a subvol
	#if (btrfs subvolume show "$s_dir" 2>&1 | grep -ivqe 'ERROR: Not a Btrfs subvolume: Invalid argument'); then

	# if its a directory

#	test -d "$s_dir" && convert_thing && return 0

	# if not a directory, if its not a file
#	test ! -e "$s_dir" && create_thing || return 1
}



# main functionality
convert_thing(){

	tmp_dir="$(realpath $s_dir )-$(tr -dc A-Z-a-z-0-9 </dev/urandom | head -c 6)"

	#$s_dir = "$(realpath $s_dir)"

	# if the source directory is PWD, do cd .. (i dont even think thats necessary)
	#test "$(realpath "$PWD")" = "$s_dir" && cd ..
	
	(
	mv "$s_dir" "$tmp_dir" && print_ansible && \
	btrfs -q subvolume create "$s_dir" && \
	mv "$tmp_dir"/* "$s_dir" && \
	rmdir "$tmp_dir"
	) || return 1
}

create_thing(){	# if the directory wasnt even there in the first place
	btrfs -q subvolume create "$s_dir" && print_ansible || return 1
}

main "$@"
